name: Gitako cPanel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9, 3.10]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: gitako_test
          MYSQL_DATABASE: gitako_test
          MYSQL_USER: gitako_test
          MYSQL_PASSWORD: gitako_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort mysqlclient
    
    - name: Check code formatting
      run: |
        black --check .
        isort --check-only --profile black .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Tests
      env:
        DATABASE_URL: mysql://gitako_test:gitako_test@localhost:3306/gitako_test
        DJANGO_SETTINGS_MODULE: gitako.settings.test
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.CPANEL_SSH_KEY }}
        known_hosts: ${{ secrets.CPANEL_KNOWN_HOSTS }}
    
    - name: Create deployment package
      run: |
        zip -r gitako_deploy.zip . -x "*.git*" -x "*.github*" -x "*.zip"
    
    - name: Upload deployment package to cPanel
      run: |
        scp gitako_deploy.zip ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }}:~/
    
    - name: Deploy to cPanel staging
      run: |
        ssh ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} << 'EOF'
          mkdir -p ~/deployment
          unzip -o ~/gitako_deploy.zip -d ~/deployment
          cd ~/deployment
          python scripts/cpanel_deploy.py --source . --no-backup
          rm -rf ~/deployment
          rm ~/gitako_deploy.zip
        EOF
    
    - name: Run post-deployment checks
      run: |
        curl --fail https://${{ secrets.STAGING_DOMAIN }}/health/ || exit 1

  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.CPANEL_SSH_KEY }}
        known_hosts: ${{ secrets.CPANEL_KNOWN_HOSTS }}
    
    - name: Create deployment package
      run: |
        zip -r gitako_deploy.zip . -x "*.git*" -x "*.github*" -x "*.zip"
    
    - name: Upload deployment package to cPanel
      run: |
        scp gitako_deploy.zip ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }}:~/
    
    - name: Deploy to cPanel production
      run: |
        ssh ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} << 'EOF'
          mkdir -p ~/deployment
          unzip -o ~/gitako_deploy.zip -d ~/deployment
          cd ~/deployment
          python scripts/cpanel_deploy.py --source .
          rm -rf ~/deployment
          rm ~/gitako_deploy.zip
        EOF
    
    - name: Run post-deployment checks
      run: |
        curl --fail https://${{ secrets.PRODUCTION_DOMAIN }}/health/ || exit 1
    
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: Production Deployment Successful
        SLACK_MESSAGE: 'Gitako API has been deployed to cPanel production :rocket:'