name: Gitako CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9, 3.10]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: gitako_test
          POSTGRES_PASSWORD: gitako_test
          POSTGRES_DB: gitako_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort
    
    - name: Check code formatting
      run: |
        black --check .
        isort --check-only --profile black .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Tests
      env:
        DATABASE_URL: postgres://gitako_test:gitako_test@localhost:5432/gitako_test
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: gitako.settings.test
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: gitako/api
        tags: |
          type=ref,event=branch
          type=sha,format=short
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=gitako/api:buildcache
        cache-to: type=registry,ref=gitako/api:buildcache,mode=max

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.STAGING_SSH_KEY }}
        known_hosts: ${{ secrets.STAGING_KNOWN_HOSTS }}
    
    - name: Deploy to staging server
      run: |
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} << 'EOF'
          cd /var/www/gitako-staging
          git pull
          docker-compose pull
          docker-compose up -d
          docker-compose exec -T api python manage.py migrate --settings=gitako.settings.staging
          docker-compose exec -T api python manage.py collectstatic --noinput --settings=gitako.settings.staging
        EOF
    
    - name: Run post-deployment checks
      run: |
        curl --fail https://staging-api.gitako.com/health/ || exit 1

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        known_hosts: ${{ secrets.PRODUCTION_KNOWN_HOSTS }}
    
    - name: Deploy to production server
      run: |
        ssh ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SSH_HOST }} << 'EOF'
          cd /var/www/gitako
          git pull
          docker-compose pull
          docker-compose up -d
          docker-compose exec -T api python manage.py migrate --settings=gitako.settings.production
          docker-compose exec -T api python manage.py collectstatic --noinput --settings=gitako.settings.production
        EOF
    
    - name: Run post-deployment checks
      run: |
        curl --fail https://api.gitako.com/health/ || exit 1
    
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: Production Deployment Successful
        SLACK_MESSAGE: 'Gitako API has been deployed to production :rocket:'